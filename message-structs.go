package discordhook

import (
	"time"

	"github.com/andersfylling/snowflake"
)

// Message represents a message sent in a channel within Discord.
// https://discord.com/developers/docs/resources/channel#message-object-message-structure
type Message struct {
	// ID (snowflake) - ID of the message
	ID snowflake.Snowflake `json:"id"`
	// ChannelID (snowflake) - ID of the channel the message was sent in
	ChannelID snowflake.Snowflake `json:"channel_id"`
	// GuildID (snowflake) - ID of the guild the message was sent in
	GuildID snowflake.Snowflake `json:"guild_id,omitempty"`
	// Author - the author of this message (not guaranteed to be a valid user, see below)
	Author *User `json:"author"`
	// Member - member properties for this message's author
	Member *GuildMember `json:"member,omitempty"`
	// Content - contents of the message
	Content string `json:"content"`
	// Timestamp - when this message was sent
	Timestamp *time.Time `json:"timestamp"`
	// EditedTimestamp - when this message was edited (or null if never)
	EditedTimestamp *time.Time `json:"edited_timestamp,omitempty"`
	// TTS - whether this was a TTS message
	TTS bool `json:"tts"`
	// MentionEveryone - whether this message mentions everyone
	MentionEveryone bool `json:"mention_everyone"`
	// Mentions - users specifically mentioned in the message
	Mentions []*User `json:"mentions"`
	// MentionRoles - specifically mentioned in this message
	MentionRoles []*Role `json:"mention_roles"`
	// MentionChannels - channels specifically mentioned in this message
	MentionChannels []*ChannelMention `json:"mention_channels,omitempty"`
	// Attachments - any attached files
	Attachments []*Attachment `json:"attachments"`
	// Embeds - any embedded content
	Embeds []*Embed `json:"embeds"`
	// Reaction - reactions to the message
	Reactions []*Reaction `json:"reactions,omitempty"`
	// Nonce - used for validating a message was sent
	Nonce string `json:"nonce,omitempty"`
	// Pinned - whether this message is pinned
	Pinned bool `json:"pinned"`
	// WebhookID (snowflake) - if the message is generated by a webhook, this is the webhook's ID
	WebhookID snowflake.Snowflake `json:"webhook_id,omitempty"`
	// Type - type of message
	Type int `json:"type"`
	// Activity - sent with Rich Presence-related chat embeds
	Activity *Activity `json:"activity,omitempty"`
	// Application sent with Rich Presence-related chat embeds
	Application *Application `json:"application,omitempty"`
	// MessageReference - reference data sent with crossposted messages
	MessageReference *MessageReference `json:"message_reference,omitempty"`
	// Flags - message flags `OR`d together, describes extra features of the message
	Flags MessageFlag `json:"flags,omitempty"`
}

// User represents User Structure
// https://discord.com/developers/docs/resources/user#user-object-user-structure
type User struct {
	// ID (snowflake) - the user's id
	ID snowflake.Snowflake `json:"id"`
	// - the user's username, not unique across the platform
	Username string `json:"username"`
	// - the user's 4-digit discord-tag
	Discriminator string `json:"discriminator"`
	// - the user's avatar hash
	Avatar string `json:"avatar,omitempty"`
	// - whether the user belongs to an OAuth2 application
	Bot bool `json:"bot,omitempty"`
	// - whether the user is an Official Discord System user (part of the urgent message system)
	System bool `json:"system,omitempty"`
	// - whether the user has two factor enabled on their account
	MfaEnabled bool `json:"mfa_enabled,omitempty"`
	// - the user's chosen language option
	Locale string `json:"locale,omitempty"`
	// - whether the email on this account has been verified
	Verified bool `json:"verified,omitempty"`
	// - the user's email
	Email string `json:"email,omitempty"`
	// - the flags on a user's account
	Flags UserFlag `json:"flags,omitempty"`
	// - the type of Nitro subscription on a user's account
	PremiumType UserPremiumType `json:"premium_type,omitempty"`
	// - the public flags on a user's account
	PublicFlags UserFlag `json:"public_flags,omitempty"`
	// Member - user's member object
	Member *GuildMember `json:"member,omitempty"`
}

// UserFlag used to describe user's flags by bits
// https://discord.com/developers/docs/resources/user#user-object-user-flags
type UserFlag int

const (
	// UserFlagNone - None
	UserFlagNone UserFlag = 0
	// UserFlagDiscordEmployee - Discord Employee
	UserFlagDiscordEmployee UserFlag = 1 << 0
	// UserFlagDiscordPartner - Discord Partner
	UserFlagDiscordPartner UserFlag = 1 << 1
	// UserFlagHypeSquadEvents - HypeSquad Events
	UserFlagHypeSquadEvents UserFlag = 1 << 2
	// UserFlagBugHunterLevel1 - Bug Hunter Level 1
	UserFlagBugHunterLevel1 UserFlag = 1 << 3
	// UserFlagHouseBravery - House Bravery
	UserFlagHouseBravery UserFlag = 1 << 6
	// UserFlagHouseBrilliance - House Brilliance
	UserFlagHouseBrilliance UserFlag = 1 << 7
	// UserFlagHouseBalance - House Balance
	UserFlagHouseBalance UserFlag = 1 << 8
	// UserFlagEarlySupporter - Early Supporter
	UserFlagEarlySupporter UserFlag = 1 << 9
	// UserFlagTeamUser - Team User
	UserFlagTeamUser UserFlag = 1 << 10
	// UserFlagSystem - System
	UserFlagSystem UserFlag = 1 << 12
	// UserFlagBugHunterLevel2 - Bug Hunter Level 2
	UserFlagBugHunterLevel2 UserFlag = 1 << 14
	// UserFlagVerifiedBot - Verified Bot
	UserFlagVerifiedBot UserFlag = 1 << 16
	// UserFlagVerifiedBotDeveloper - Verified Bot Developer
	UserFlagVerifiedBotDeveloper UserFlag = 1 << 17
)

// UserPremiumType - premium types denote the level of premium a user has.
// https://discord.com/developers/docs/resources/user#user-object-premium-types
type UserPremiumType int

const (
	// UserPremiumTypeNone - None
	UserPremiumTypeNone UserPremiumType = 0
	// UserPremiumTypeNitroClassic - Nitro Classic
	UserPremiumTypeNitroClassic UserPremiumType = 1
	// UserPremiumTypeNitro - Nitro
	UserPremiumTypeNitro UserPremiumType = 2
)

// GuildMember represents Guild Member Structure
// https://discord.com/developers/docs/resources/guild#guild-member-object-guild-member-structure
type GuildMember struct {
	// User - the user this guild member represents
	User *User `json:"user,omitempty"`
	// Nick - this users guild nickname
	Nick string `json:"nick,omitempty"`
	// Roles - array of role object IDs (snowflakes)
	Roles []snowflake.Snowflake `json:"roles"`
	// JoindeAt - when the user joined the guild
	JoinedAt *time.Time `json:"joined_at"`
	// PremiumSince - when the user started boosting the guild
	PremiumSince *time.Time `json:"premium_since,omitempty"`
	// Deaf - whether the user is deafened in voice channels
	Deaf bool `json:"deaf"`
	// Mute - whether the user is muted in voice channels
	Mute bool `json:"mute"`
}

// Role - Roles represent a set of permissions attached to a group of users.
// Roles have unique names, colors, and can be "pinned" to the side bar,
// causing their members to be listed separately. Roles are unique per guild,
// and can have separate permission profiles for the global context (guild)
// and channel context. The @everyone role has the same ID as the guild it belongs to.
// https://discord.com/developers/docs/topics/permissions#role-object-role-structure
type Role struct {
	// ID (snowflake) - role ID
	ID snowflake.Snowflake `json:"id"`
	// Name - role name
	Name string `json:"name"`
	// COlor - integer representation of hexadecimal color code
	Color int `json:"color"`
	// Hoist - if this role is pinned in the user listing
	Hoist bool `json:"hoist"`
	// Position - position of this role
	Position int `json:"position"`
	// Permissions - permission bit set
	Permissions int `json:"permissions"`
	// Managed - whether this role is managed by an integration
	Managed bool `json:"managed"`
	// Mentionable - whether this role is mentionable
	Mentionable bool `json:"mentionable"`
}

// ChannelMention represents Channel Mention Structure
// https://discord.com/developers/docs/resources/channel#channel-mention-object-channel-mention-structure
type ChannelMention struct {
	// ID (snowflake) - id of the channel
	ID snowflake.Snowflake `json:"id"`
	// GuildID (snowflake) - id of the guild containing the channel
	GuildID snowflake.Snowflake `json:"guild_id"`
	// Type - the type of channel
	Type ChannelType `json:"type"`
	// Name - the name of the channel
	Name string `json:"name"`
}

// ChannelType - channel type integer
// https://discord.com/developers/docs/resources/channel#channel-object-channel-types
type ChannelType int

const (
	// ChannelTypeChannelTypeGuildText - a text channel within a server
	ChannelTypeChannelTypeGuildText = 0
	// ChannelTypeDM - a direct message between users
	ChannelTypeDM = 1
	// ChannelTypeGuildVoice - a voice channel within a server
	ChannelTypeGuildVoice = 2
	// ChannelTypeGroupDM - a direct message between multiple users
	ChannelTypeGroupDM = 3
	// ChannelTypeGuildCATEGORY - an organizational category that contains up to 50 channels
	ChannelTypeGuildCATEGORY = 4
	// ChannelTypeGuildNews - a channel that users can follow and crosspost into their own server
	ChannelTypeGuildNews = 5
	// ChannelTypeGuildSstor - a channel in which game developers can sell their game on Discord
	ChannelTypeGuildSstor = 6
)

// Attachment represents Attachment Structure
// https://discord.com/developers/docs/resources/channel#attachment-object-attachment-structure
type Attachment struct {
	// ID (snowflake) - attachment id
	ID snowflake.Snowflake `json:"id"`
	// Filenmae - name of file attached
	Filename string `json:"filename"`
	// Size - size of file in bytes
	Size int `json:"size"`
	// URL - source url of file
	URL string `json:"url"`
	// ProxyURL - a proxied url of file
	ProxyURL string `json:"proxy_url"`
	// Height - height of file (if image)
	Height int `json:"height"`
	// Width - width of file (if image)
	Width int `json:"width"`
}

// Reaction represents Reaction Structure
// https://discord.com/developers/docs/resources/channel#reaction-object-reaction-structure
type Reaction struct {
	// Count - times this emoji has been used to react
	Count int `json:"count"`
	// Me - whether the current user reacted using this emoji
	Me bool `json:"me"`
	// Emoji - emoji information
	Emoji *Emoji `json:"emoji"`
}

// Emoji represents Emoji Structure
// https://discord.com/developers/docs/resources/emoji#emoji-object-emoji-structure
type Emoji struct {
	// ID (snowflake) - emoji id
	ID snowflake.Snowflake `json:"id"`
	// Name - emoji name (can be empty only in reaction emoji objects)
	Name string `json:"name"`
	// Roles - roles this emoji is whitelisted to
	Roles []*Role `json:"roles,omitempty"`
	// User - user that created this emoji
	User *User `json:"user,omitempty"`
	// RequireColons - whether this emoji must be wrapped in colons
	RequireColons bool `json:"require_colons,omitempty"`
	// Managed - whether this emoji is managed
	Managed bool `json:"managed,omitempty"`
	// Animated - whether this emoji is animated
	Animated bool `json:"animated,omitempty"`
	// Available - whether this emoji can be used, may be false due to loss of Server Boosts
	Available bool `json:"available,omitempty"`
}

// Activity represents Message Activity Structure
// https://discord.com/developers/docs/resources/channel#message-object-message-activity-structure
type Activity struct {
	// Type - type of message activity
	Type int `json:"type"`
	// PartyID - party_id from a Rich Presence event
	PartyID snowflake.Snowflake `json:"party_id,omitempty"`
}

// MessageActivityType userd describes message activity types
// https://discord.com/developers/docs/resources/channel#message-object-message-activity-types
type MessageActivityType int

const (
	// MessageActivityTypeJoin - JOIN
	MessageActivityTypeJoin MessageActivityType = 1
	// MessageActivityTypeSpectate - SPECTATE
	MessageActivityTypeSpectate MessageActivityType = 2
	//MessageActivityTypeListen - LISTEN
	MessageActivityTypeListen MessageActivityType = 3
	// MessageActivityTypeJoinRequest - JOIN_REQUEST
	MessageActivityTypeJoinRequest MessageActivityType = 5
)

// Application represents Message Application Structure
// https://discord.com/developers/docs/resources/channel#message-object-message-application-structure
type Application struct {
	// ID (snowflake) - ID of the application
	ID snowflake.Snowflake `json:"id"`
	// CoverImage - ID of the embed's image asset
	CoverImage string `json:"cover_image,omitempty"`
	// Description - application's description
	Description string `json:"description"`
	// Icon - id of the application's icon
	Icon string `json:"icon"`
	// Name - name of the application
	Name string `json:"name"`
}

// MessageReference represents Message Reference Structure
// https://discord.com/developers/docs/resources/channel#message-object-message-reference-structure
type MessageReference struct {
	// MessageID (snowflake) - ID of the originating message
	MessageID snowflake.Snowflake `json:"name,omitempty"`
	// ChannelID (snowflake) - ID of the originating message's channel
	ChannelID snowflake.Snowflake `json:"channel_id"`
	// GuildID (snowflake) - ID of the originating message's guild
	GuildID snowflake.Snowflake `json:"guild_id,omitempty"`
}

// MessageFlag used for describing extra features of the message by bits
// https://discord.com/developers/docs/resources/channel#message-object-message-flags
type MessageFlag int

const (
	// MessageFlagsCrossposted - this message has been published to subscribed channels (via Channel Following)
	MessageFlagsCrossposted MessageFlag = 1 << 0
	// MessageFlagIsCrosspost - this message originated from a message in another channel (via Channel Following)
	MessageFlagIsCrosspost MessageFlag = 1 << 1
	// MessageFlagSupressEmbeds - do not include any embeds when serializing this message
	MessageFlagSupressEmbeds MessageFlag = 1 << 2
	// MessageFlagSourceMessageDeleted - the source message for this crosspost has been deleted (via Channel Following)
	MessageFlagSourceMessageDeleted MessageFlag = 1 << 3
	// MessageFlagUrgent - this message came from the urgent message system
	MessageFlagUrgent MessageFlag = 1 << 4
)
